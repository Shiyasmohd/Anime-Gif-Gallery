{"version":3,"sources":["MainPage.js","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","MainPage","useState","walletAddress","setWalletAddress","inputLink","setInputLink","gifList","setGifList","renderNotConnectedContainer","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","useEffect","onLoad","addEventListener","removeEventListener","getGifList","provider","getProvider","program","Program","account","fetch","sendGif","length","rpc","addGif","accounts","user","wallet","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","className","onClick","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","map","item","index","src","gifLink","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ad37dab.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect ,useState} from 'react/cjs/react.development';\nimport {Connection,PublicKey,clusterApiUrl} from '@solana/web3.js';\nimport {Program,Provider,web3} from '@project-serum/anchor'\nimport idl from './idl.json'\nimport kp from './keypair.json'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst {SystemProgram,Keypair} = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts ={\n  preflightCommitment :\"processed\"\n}\n\nconst TEST_GIFS = [\n\t'https://media.giphy.com/media/7MjDKQZF02mLS/giphy.gif',\n\t'https://media.giphy.com/media/11O5c9EfmZTyyA/giphy.gif',\n\t'https://media.giphy.com/media/3PxSmPCeQsVGUl2Q35/giphy.gif',\n\t'https://media.giphy.com/media/TdoiN7rZuGDJPs2rAS/giphy.gif',\n\t'https://media.giphy.com/media/TdoiN7rZuGDJPs2rAS/giphy.gif',\n\t'https://media.giphy.com/media/TdoiN7rZuGDJPs2rAS/giphy.gif',\n]\n\nconst MainPage = () => {\n\n  const [walletAddress,setWalletAddress] = useState(null);\n  const [inputLink,setInputLink] = useState('');\n  const [gifList,setGifList] = useState([]);\n\n  const renderNotConnectedContainer = async () =>{\n    try{\n      const {solana} = window;\n\n      if(solana){\n        if(solana.isPhantom){\n          console.log(\"Phantom Found\");\n          const response = await solana.connect({onlyIfTrusted : true});\n          console.log(\"Connected with public key :\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      }else{\n        alert('Phantom Not found')\n      }\n    }catch(error){\n      console.error(error);\n    }\n  }\n\n  const renderConnectedContainer = () => {\n\n    if (gifList==null){\n      return(\n        <div className='connected-container'>\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    }else{\n      return(\n      <div className=\"connected-container\">\n        <form onSubmit={(e)=>{\n          e.preventDefault();\n          sendGif();\n        }}>\n        <input type=\"text\" placeholder=\"Enter GIF Link!\" value={inputLink} onChange={(e)=>{setInputLink(e.target.value)}} /><br/>\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n        </form>\n        <div className=\"gif-grid\">\n          {gifList.map((item,index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink}  />\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n    }\n  };\n\n  const connectWallet = async() =>{\n    const {solana} = window;\n\n    if(solana){\n      const response = await solana.connect();\n      console.log(\"Connected with public key :\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n\n  const connectWalletBtn = () =>(\n    <button className='cta-button connect-wallet-button' onClick={connectWallet}>Connect to Wallet</button>\n  )\n  \n\n  useEffect(()=>{\n\n    const onLoad = async () =>{\n      await renderNotConnectedContainer();\n    }\n    window.addEventListener('load',onLoad);\n    return ()=> window.removeEventListener('load',onLoad);\n  },[]);\n\n  const getGifList = async() =>{\n    try{\n      const provider = getProvider();\n      const program = new Program(idl,programID,provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got account\", account);\n      setGifList(account.gifList);\n    }catch(error){\n      console.log(\"Error i giflist\", error);\n      setGifList(null);\n    }\n  }\n\n  useEffect(()=>{\n    if(walletAddress){\n      console.log('fetching giflist');\n      getGifList();\n    }\n  },[walletAddress])\n\n  const sendGif = async () => {\n    if (inputLink.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputLink('');\n    console.log('Gif link:', inputLink);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputLink)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async() =>{\n    try{\n      const provider = getProvider();\n      const program = new Program(idl,programID,provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts : {\n          baseAccount : baseAccount.publicKey,\n          user : provider.wallet.publicKey,\n          systemProgram : SystemProgram.programId\n        },\n        signers:[baseAccount]\n      })\n\n      console.log(\"Created a new baseAccount w/ Address \", baseAccount.publicKey.toString());\n      await getGifList();\n    }catch(error){\n      console.log(\"Error creating baseAccount : \",error)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Anime GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && connectWalletBtn()}\n          { walletAddress && renderConnectedContainer()}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import './App.css';\nimport MainPage from './MainPage'\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\n\n\n\nconst App = () => {\n  return (\n    <Router>\n          <MainPage/>\n      </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}